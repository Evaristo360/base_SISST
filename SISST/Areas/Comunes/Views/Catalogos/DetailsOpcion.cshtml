@model SISST.ViewModels.Comunes.Catalogos.VMOpcion
@using Microsoft.AspNetCore.Http
@inject IHttpContextAccessor HttpContextAccessor
@{ ViewData["Title"] = "Detalles de opción de catálogo";
    Layout = "~/Views/Shared/_Layout.cshtml";
    string claseBotonGuardar = Context.Session.GetString("claseBotonGuardar");
    string claseBotonCancelar = Context.Session.GetString("claseBotonCancelar");
}

<div class="card">
    <div class="card-header">
        <div class="row">
            <div class="col-8  align-content-center">
                <h3 class="pl-3">Detalles de opción del catálogo @Model.NombreCatalogo</h3>
                <ol class="breadcrumb mb-0 " style="background-color:white;">
                    <li class="breadcrumb-item">
                        <a href="~/Comunes/Catalogos/Index">Lista de catálogos</a>
                    </li>
                    <li class="breadcrumb-item">
                        <a href="~/Comunes/Catalogos/Details/ @ViewBag.IdCatalogo">Consulta de catálogo</a>
                    </li>
                    <li class="breadcrumb-item active">Detalles de opción de catálogo</li>
                </ol>
            </div>
            <div class="col-4 text-right mt-3">
                @Html.ActionLink("Consulta de catálogo", "Details", "Catalogos", new { id = @ViewBag.IdCatalogo }, new { @class = "btn btn_sistema" })
            </div>
        </div>
    </div>
</div>
<div class="card card-default  ">
    <h4 class="card-header">Detalles de la opción @Model.Nombre</h4>
    <div class="card-body">
        <form>
            @*@Html.AntiForgeryToken()
            @Html.HiddenFor(model => model.IdCatalogo)
            @Html.HiddenFor(model => model.IdCatalogoSuperior)*@
            <div class="form-group row">
                @Html.LabelFor(model => model.EsSeleccionable, htmlAttributes: new { @class = "col-md-2  pl-5 col-form-label" })
                <div class="col-md-10">
                    <input class="form-control" type="text"  value="@Model.EtiquetaEsSeleccionable" readonly />
                </div>
            </div>
            <div class="form-group row">
                @Html.LabelFor(model => model.Clave, htmlAttributes: new { @class = "col-md-2  pl-5 col-form-label" })
                <div class="col-md-10">
                    <input class="form-control" type="text"  value="@Model.Clave" readonly />
                </div>
            </div>
            <div class="form-group row">
                @Html.LabelFor(model => model.Orden, htmlAttributes: new { @class = "col-md-2  pl-5 col-form-label" })
                <div class="col-md-10">
                    <input class="form-control" type="text"  value="@Model.Orden" readonly />
                </div>
            </div>
            <div class="form-group row">
                @Html.LabelFor(model => model.Nombre, htmlAttributes: new { @class = "col-md-2  pl-5 col-form-label" })
                <div class="col-md-10">
                    <input class="form-control" type="text"  value="@Model.Nombre" readonly />
                </div>
            </div>
            <div class="form-group row">
                @Html.LabelFor(model => model.Descripcion, htmlAttributes: new { @class = "col-md-2  pl-5 col-form-label" })
                <div class="col-md-10">
                    <textarea class="form-control autoResize" type="text"  readonly>@Model.Descripcion</textarea>
                </div>
            </div>
            <div class="form-group row">
                @Html.LabelFor(model => model.Ayuda, htmlAttributes: new { @class = "col-md-2  pl-5 col-form-label" })
                <div class="col-md-10">
                    <div id="divAyuda" class="form-control autoResize" readonly >
                        @Html.Raw(@Model.Ayuda) 
                    </div>
                </div>
            </div>
            <div class="form-group row">
                @Html.LabelFor(model => model.Estado, htmlAttributes: new { @class = "col-md-2  pl-5 col-form-label" })
                <div class="col-md-10">
                    <input class="form-control" type="text"  value="@Model.EtiquetaEstado" readonly />
                </div>
            </div>
            <div class="form-group row">
                @Html.LabelFor(model => model.IdProceso, htmlAttributes: new { @class = "col-md-2  pl-5 col-form-label" })
                <div class="col-md-10">
                    <input class="form-control" type="text"  value="@Model.Proceso" readonly />
                </div>
            </div>
            <div class="form-group row">
                <div class="col-md-10 offset-2">
                    <button type="button" class="@claseBotonCancelar deleteConfirmation mr-1"><i class="fas fa-trash-alt pr-2"></i>Eliminar</button>
                    <button type="button" class="@claseBotonGuardar mr-1" onclick="location.href='@Url.Action("EditOpcion", "Catalogos", new { Area = "Comunes",   idOpcion = Model.IdCatalogo })'"> <i class="fa fa-edit pr-2"></i> Editar</button>
                </div>
            </div>
        </form>
    </div>
</div>

@using (Html.BeginForm("DeleteOpcion", "Catalogos", FormMethod.Post, new { @id = "frmDelete" }))
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(model => model.IdCatalogo)
    @Html.HiddenFor(model => model.IdCatalogoSuperior)
}
@section Scripts {
   
    <script>
            $(document).ready(function () {
                if ('@TempData["tipoMensaje"]' != "") {
                    toastr.options.positionClass = 'toast-bottom-right';
                    toastr['@TempData["tipoMensaje"]']('@TempData["mensaje"]');                   
                }
                
                ResizeDivAyuda();           
            });

        function ResizeDivAyuda(customInitHeight = 0) {            
            $("#divAyuda").each(function () {
                var theHeight = customInitHeight == 0 ? this.scrollHeight+20 : customInitHeight;
                this.setAttribute("style", "height:" + (theHeight) + "px;overflow-y:hidden;");
            }).on("input", function () {
                this.style.height = "auto";
                this.style.height = (this.scrollHeight) + "px";
            });
        }
    </script>
}
